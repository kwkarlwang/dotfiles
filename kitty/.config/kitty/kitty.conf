# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

#font_family      Fira Code Regular
#bold_font        Fira Code Retina
#italic_font      Menlo Italic
#bold_italic_font Menlo Bold Italic

font_family      JetBrains Mono
bold_font        JetBrains Mono Bold
italic_font      JetBrains Mono Italic
bold_italic_font JetBrains Mono Bold Italic

font_size 10.0

#: Font size (in pts)

## TODO: Fira code only 
# adjust_line_height  -6
# adjust_baseline 5

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

# disable_ligatures never
disable_ligatures cursor
# disable_ligatures always

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them.  You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#font_features FiraCode-Regular +zero +ss01 +ss02 +ss03 +ss05
#font_features FiraCode-Retina +zero +ss01 +ss02 +ss03 +ss05


#: }}}

#: Cursor customization {{{

# cursor #ffffe0
# cursor #e1f5fe
cursor none
shell_integration no-cursor

#: Default cursor color

cursor_text_color #282a36
# cursor_text_color background
#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

cursor_blink_interval 0

#: }}}

#: Scrollback {{{

scrollback_lines 10000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

 #scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
scrollback_pager /opt/homebrew/bin/nvim -u NONE -c "set nowrap nolist showtabline=0 foldcolumn=0 laststatus=0" -c "autocmd TermOpen * normal G" -c "map q :qa!<CR>" -c "set clipboard+=unnamedplus" -c "silent write! /tmp/kitty_scrollback_buffer | te echo -n \"$(cat /tmp/kitty_scrollback_buffer)\" && sleep 1000 "


#scrollback_pager nvimpager


#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position.

# scrollback_pager_history_size 0

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores the data in UTF-8, so approximatively 10000
#: lines per megabyte at 100 chars per line, for pure ASCII text,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

# wheel_scroll_multiplier 5.0

#: Modify the amount scrolled by the mouse wheel. Note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macOS and Wayland. Use negative
#: numbers to change scroll direction.

# touch_scroll_multiplier 1.0

#: Modify the amount scrolled by a touchpad. Note this is only used
#: for high precision scrolling devices on platforms such as macOS and
#: Wayland. Use negative numbers to change scroll direction.

#: }}}

#: Mouse {{{

mouse_hide_wait 10.0

#: }}}


enable_audio_bell no

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

enabled_layouts splits,stack

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the https://sw.kovidgoyal.net/kitty/index.html#layouts.

window_padding_width 4

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

hide_window_decorations yes

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this setting when reloading config are undefined.

#: }}}

#: Tab bar {{{

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

#: }}}

#: Color scheme {{{

foreground #ffffe0
background #282a36

# selection_foreground #000000

#: The foreground for text selected with the mouse. A value of none
#: means to leave the color unchanged.

# selection_background #55596d

#: The background for text selected with the mouse.

#: The color table {{{

color0 #000000
color8 #676767

#: black

color1 #ee766d
color9 #f4b26d

#: red

color2  #88f298
color10 #88f298

#: green

color3  #f5f7a8
color11 #f5f7a8

#: yellow

color4  #c4acf5
color12 #c4acf5

#: blue

color5  #bf9eee
color13 #f199ce

#: magenta

color6  #acebfb
color14 #acebfb

#: cyan

color7  #c7c7c7
color15 #feffff

#: white

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)

#: }}}

#: }}}

#: Advanced {{{

allow_remote_control yes

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty. Changing this option by reloading the
#: config will only affect newly created windows.

# listen_on none

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.

update_check_interval 0

#: Periodically check if an update to kitty is available. If an update
#: is found a system notification is displayed informing you of the
#: available update. The default is to check every 24 hrs, set to zero
#: to disable. Changing this option by reloading the config is not
#: supported.

term xterm-kitty
# term xterm-256color

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

#: OS specific tweaks {{{

# wayland_titlebar_color system

#: Change the color of the kitty window's titlebar on Wayland systems
#: with client side window decorations such as GNOME. A value of
#: system means to use the default system color, a value of background
#: means to use the background color of the currently active window
#: and finally you can use an arbitrary color, such as #12af59 or red.

# macos_titlebar_color system

#: Change the color of the kitty window's titlebar on macOS. A value
#: of system means to use the default system color, a value of
#: background means to use the background color of the currently
#: active window and finally you can use an arbitrary color, such as
#: #12af59 or red. WARNING: This option works by using a hack, as
#: there is no proper Cocoa API for it. It sets the background color
#: of the entire window and makes the titlebar transparent. As such it
#: is incompatible with background_opacity. If you want to use both,
#: you are probably better off just hiding the titlebar with
#: hide_window_decorations.

macos_option_as_alt yes

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique. You
#: can use the values: left, right, or both to use only the left,
#: right or both Option keys as Alt, instead. Changing this setting by
#: reloading the config is not supported.

# macos_hide_from_tasks no

#: Hide the kitty window from running tasks (⌘+Tab) on macOS. Changing
#: this setting by reloading the config is not supported.

macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed. By
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macOS.

#: }}}

#: Keyboard shortcuts {{{



#: Scrolling {{{

map ctrl+shift+space         show_scrollback

#: }}}

#: Window management {{{

# split panes
map cmd+enter launch --location=vsplit --cwd=current
map cmd+shift+enter launch --location=hsplit --cwd=current

# navigate panes
map cmd+shift+h neighboring_window left
map cmd+shift+j neighboring_window down
map cmd+shift+k neighboring_window up
map cmd+shift+l neighboring_window right
map cmd+shift+r layout_action rotate

# move panes
map alt+shift+h move_window left
map alt+shift+j move_window down
map alt+shift+k move_window up
map alt+shift+l move_window right

# resize panes
map cmd+alt+h resize_window narrower 5
map cmd+alt+l resize_window wider 5
map cmd+alt+k resize_window taller 2
map cmd+alt+j resize_window shorter 2

# close window
map cmd+d close_window
#: }}}

#: Tab management {{{

map cmd+t new_tab_with_cwd
map cmd+] move_tab_forward
map cmd+[ move_tab_backward
map cmd+, set_tab_title
map cmd+n new_os_window_with_cwd

#: }}}

#: Layout management {{{

# full screen
map cmd+f next_layout

#: }}}


# make vim recognize shift enter and ctrl enter
map shift+enter send_text all \x1b[13;2u
map ctrl+enter send_text all \x1b[13;5u
map ctrl+; send_text all \x1b[59;5u
# remove word
map alt+backspace send_text all \x17
# remove line
map super+backspace send_text all \x15
# move to beginning
map super+left send_text all \x01
# move to end
map super+right send_text all \x05
